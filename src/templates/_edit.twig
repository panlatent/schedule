{% extends "_layouts/cp" %}

{% set groupId = groupId is defined ? groupId : craft.app.request.getQueryParam('groupId') %}
{% set title = isNewSchedule ? 'New a schedule'|t('schedule') : 'Edit: {name}'|t('schedule', {name: schedule.name}) %}
{% set selectedSubnavItem = "schedules" %}
{% set allowChange = isNewSchedule or not schedule.static or craft.app.config.general.allowAdminChanges %}

{% if allowChange %}
    {% set fullPageForm = true %}
{% endif %}

{% set crumbs = [{
    label: 'Schedule'|t('schedule'),
    url: url('schedule')
}] %}

{% set tabs = {
    settings: { label: "Settings"|t('schedule'), url: '#settings' },
} %}

{% import "schedule/_includes/forms.twig" as forms %}

{% block content %}
    <div id="settings" class="schedule-settings">
        <input type="hidden" name="action" value="schedule/schedules/save-schedule">
        <input type="hidden" name="scheduleId" value="{{ schedule.id }}">

        <div id="group" {% if schedule.static %}class="hidden"{% endif %}>
            {{ forms.selectField({
                label: 'Group'|t('app'),
                id: 'groupId',
                name: 'groupId',
                value: schedule.groupId ?? groupId,
                options: groupOptions,
            }) }}
        </div>

        {{ forms.textField({
            label: 'Name'|t('app'),
            required: true,
            readonly: not allowChange,
            id: 'name',
            name: 'name',
            value: schedule.name,
            errors: schedule.getErrors('name'),
        }) }}

        {{ forms.textField({
            label: 'Handle'|t('app'),
            required: true,
            readonly: not allowChange,
            id: 'handle',
            name: 'handle',
            value: schedule.handle,
            errors: schedule.getErrors('handle'),
        }) }}

        {{ forms.selectField({
            label: 'When to execute'|t('schedule'),
            disabled: not allowChange,
            id: 'timerType',
            name: 'timerType',
            value: className(schedule.timer),
            options: timerTypeOptions,
            toggle: true,
        }) }}

        {% for timerType in timerTypes %}
            {% set isCurrent =  (timerType == className(schedule.timer)) %}
            <div id="{{ timerType|id }}"{% if not isCurrent %} class="hidden"{% endif %}>
                {% if isCurrent %}
                    {% namespace "timerTypes[" ~ timerType ~ "]" %}
                        {{ schedule.timer.getSettingsHtml()|raw }}
                    {% endnamespace %}
                {% else %}
                    <div class="settings-loading">
                        <div class="spinner"></div>
                    </div>
                {% endif %}

            </div>
        {% endfor %}

        {{ forms.errorList(schedule.getErrors('timer')) }}

        <hr>

        {{ forms.action({
            label: 'What to do'|t('schedule'),
            value: schedule.action,
        }) }}

{#        {{ forms.selectField({#}
{#            label: 'What to do'|t('schedule'),#}
{#            disabled: not allowChange,#}
{#            name: 'actionType',#}
{#            value: className(schedule.action),#}
{#            options: actionTypeOptions,#}
{#            toggle: true,#}
{#        }) }}#}

{#        {% for actionType in actionTypes %}#}
{#            {% set isCurrent = (actionType == className(schedule.action)) %}#}
{#            <div id="{{ actionType|id }}"{% if not isCurrent %} class="hidden"{% endif %}>#}
{#                {% if isCurrent %}#}
{#                    {% namespace "actionTypes[" ~ actionType ~ "]" %}#}
{#                        {{ schedule.action.getSettingsHtml()|raw }}#}
{#                    {% endnamespace %}#}
{#                {% else %}#}
{#                    <div class="settings-loading">#}
{#                        <div class="spinner"></div>#}
{#                    </div>#}
{#                {% endif %}#}
{#            </div>#}
{#        {% endfor %}#}
    </div>
{% endblock %}

{% block details %}
    <div class="meta">
        {{ forms.datetimeField({
            label: 'Expiry Date'|t('schedule'),
            id: 'timeout',
            name: 'timeout',
            errors: schedule.getErrors('timeout'),
        }) }}
    </div>

    {% if craft.app.config.general.allowAdminChanges or not isNewSchedule %}
        <div class="meta">
        {{ forms.lightswitchField({
            label: 'Static'|t('schedule'),
            id: 'static',
            name: 'static',
            disabled: not allowChange,
            on: schedule.static,
            errors: schedule.getErrors('static'),
            reverseToggle: 'group',
        }) }}
        </div>
    {% endif %}

    <fieldset>
        <legend class="h6">{{ "Limits"|t('app') }}</legend>
        <div class="meta">
            {{ forms.textField({
                label: 'Timeout'|t('schedule'),
                id: 'timeout',
                name: 'timeout',
                errors: schedule.getErrors('timeout'),
            }) }}

            {{ forms.textField({
                label: 'Retry'|t('schedule'),
                id: 'retry',
                name: 'retry',
                errors: schedule.getErrors('retry'),
            }) }}
        </div>
    </fieldset>

    <fieldset>
        <legend class="h6">{{ "Then"|t('app') }}</legend>
        <div class="meta">
            {{ forms.actionTypeField({
                label: 'On Success'|t('schedule'),
                id: 'successActionType',
                name: 'successActionType',
                errors: schedule.getErrors('successActionType'),
            }) }}

            {{ forms.actionTypeField({
                label: 'On Failed'|t('schedule'),
                id: 'failedActionType',
                name: 'failedActionType',
                errors: schedule.getErrors('failedActionType'),
            }) }}
        </div>
    </fieldset>

    <fieldset>
        <legend class="h6">{{ "Status"|t('app') }}</legend>
        <div class="meta">
            {{ forms.lightswitchField({
                label: 'Enabled'|t('app'),
                id: 'enabled',
                name: 'enabled',
                on: schedule.enabled,
                errors: schedule.getErrors('enabled'),
            }) }}

{#            {{ forms.lightswitchField({#}
{#                label: 'Enabled Log'|t('schedule'),#}
{#                id: 'enabledLog',#}
{#                name: 'enabledLog',#}
{#                on: schedule.enabledLog,#}
{#                errors: schedule.getErrors('enabledLog'),#}
{#            }) }}#}
        </div>
    </fieldset>

    {{ forms.textareaField({
        label: 'Description'|t('app'),
        readonly: not allowChange,
        id: 'description',
        name: 'description',
        value: schedule.description,
        errors: schedule.getErrors('description'),
    }) }}

    <div class="meta read-only">
        {% if not isNewSchedule %}
        <div class="data">
            <h5 class="heading">{{ "Created at"|t('app') }}</h5>
            <div class="value">{{ schedule.dateCreated|datetime('short') }}</div>
        </div>
        <div class="data">
            <h5 class="heading">{{ "Updated at"|t('app') }}</h5>
            <div class="value">{{ schedule.dateUpdated|datetime('short') }}</div>
        </div>
        {% endif %}
{#        {% if schedule.lastFinishedDate is not empty %}#}
{#            <div class="data">#}
{#                <h5 class="heading">{{ "Last running at"|t('schedule') }}</h5>#}
{#                <div class="value">#}
{#                    {% if schedule.lastStatus %}#}
{#                        <span class="status green"></span>#}
{#                    {% else %}#}
{#                        <span class="status red"></span>#}
{#                    {% endif %}#}
{#                    {{ schedule.lastFinishedDate|datetime('short') }}#}
{#                </div>#}
{#            </div>#}
{#        {% endif %}#}
    </div>
{% endblock %}

{#{% set actionTypeIds = [] %}#}
{#{% for actionType in actionTypes %}#}
{#    {% if actionType != className(schedule.action) %}#}
{#        {% set actionTypeIds = actionTypeIds|merge({(actionType): actionType|id}) %}#}
{#    {% endif %}#}
{#{% endfor %}#}

{% set timerTypeIds = [] %}
{% for timerType in timerTypes %}
    {% if timerType != className(schedule.timer) %}
        {% set timerTypeIds = timerTypeIds|merge({(timerType): timerType|id}) %}
    {% endif %}
{% endfor %}

{% js %}
    var timerTypes = {{ timerTypeIds|json_encode|raw }};
    $('select[name=timerType]').on('change', function(value) {
        var timerType = $(this).val();
        if (timerType in timerTypes) {
            var id = '#' + timerTypes[timerType];
            let _cancelToken =  axios.CancelToken.source();
            Craft.sendActionRequest("POST", "schedule/timers/render-settings", {
                cancelToken: _cancelToken.token,
                data: {
                    type: timerType,
                },
            }).then(function(response) {
                let $settings = $(response.data.settingsHtml || '');
                $(id).html(response.data.settingsHtml);
                Craft.appendHeadHtml(response.data.headHtml);
                Craft.appendBodyHtml(response.data.bodyHtml);
            })
            delete timerTypes[timerType]
        }
    });
{% endjs %}

{% css %}
    .settings-loading {
    display: block;
    height: 100px;
    margin: 0px 0px;
    padding: 0;
    border: 1px solid #fff;
    border-radius: 4px;
    }
    .spinner {
    margin: 25px auto;
    display: block;
    width: 50px;
    height: 40px;
    text-align: center;
    font-size: 10px;
    }
{% endcss %}

